// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/bloc/tv/watchlist_tv_series_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ditonton/common/failure.dart' as _i5;
import 'package:ditonton/domain/entities/tv.dart' as _i6;
import 'package:ditonton/domain/entities/tv_detail.dart' as _i9;
import 'package:ditonton/domain/usecases/tv/get_watchlist_tv_series.dart'
    as _i3;
import 'package:ditonton/domain/usecases/tv/get_watchlist_tv_series_status.dart'
    as _i7;
import 'package:ditonton/domain/usecases/tv/remove_watchlist_tv_series.dart'
    as _i10;
import 'package:ditonton/domain/usecases/tv/save_watchlist_tv_series.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvSeries extends _i1.Mock
    implements _i3.GetWatchlistTvSeries {
  MockGetWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Tv>>(
                  this, Invocation.method(#execute, [])))) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Tv>>>);
}

/// A class which mocks [GetWatchListTvSeriesStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListTvSeriesStatus extends _i1.Mock
    implements _i7.GetWatchListTvSeriesStatus {
  MockGetWatchListTvSeriesStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: _i4.Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [SaveWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistTvSeries extends _i1.Mock
    implements _i8.SaveWatchlistTvSeries {
  MockSaveWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> execute(_i9.TvDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeries]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither_0<_i5.Failure, String>(
                      this, Invocation.method(#execute, [tvSeries]))))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistTvSeries].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistTvSeries extends _i1.Mock
    implements _i10.RemoveWatchlistTvSeries {
  MockRemoveWatchlistTvSeries() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> execute(_i9.TvDetail? tvSeries) =>
      (super.noSuchMethod(Invocation.method(#execute, [tvSeries]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                  _FakeEither_0<_i5.Failure, String>(
                      this, Invocation.method(#execute, [tvSeries]))))
          as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
